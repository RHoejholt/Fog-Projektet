@startuml

Title Fog Carports

scale 0.5
package entities{
class Carport {
    - int carportId
    - double width
    - double length
    - double height
    - String roofMaterial
    - int roofPitch
    - boolean hasShed
    + Carport(int, double, double, double, String, int, boolean)
    + int getCarportId()
    + double getWidth()
    + double getLength()
    + double getHeight()
    + String getRoofMaterial()
    + int getRoofPitch()
    + boolean hasShed()
}

class Shed {
    - int shedId
    - double width
    - double depth
    - String cladding
    - String floorType
    + Shed(int, double, double, String, String)
    + int getShedId()
    + double getWidth()
    + double getDepth()
    + String getCladding()
    + String getFloorType()
}

class Orderline {
    - int orderlineId
    - int orderId
    - int carportId
    - int shedId
    - int quantity
    - BigDecimal price
    + Orderline(int, int, int, int, int, BigDecimal)
    + int getOrderlineId()
    + int getOrderId()
    + int getCarportId()
    + int getShedId()
    + int getQuantity()
    + BigDecimal getPrice()
}

class Orders {
    - int orderId
    - Timestamp orderDate
    - BigDecimal totalPrice
    + Orders(int, Timestamp, BigDecimal)
    + int getOrderId()
    + Timestamp getOrderDate()
    + BigDecimal getTotalPrice()
}
}

package Persistence{
class ConnectionPool {
    - static ConnectionPool instance
    - static HikariDataSource ds
    + static ConnectionPool getInstance(String, String, String, String)
    + synchronized Connection getConnection()
    + synchronized void close()
}

class CarportMapper {
    + static Carport getCarportById(int, ConnectionPool) throws DatabaseException
    + static void createCarport(double, double, double, String, int, boolean, ConnectionPool) throws DatabaseException
}

class ShedMapper {
    + static Shed getShedById(int, ConnectionPool) throws DatabaseException
    + static void createShed(double, double, String, String, ConnectionPool) throws DatabaseException
}

class OrderlineMapper {
    + static List<Orderline> getAllOrderlinesPerOrder(int, ConnectionPool) throws DatabaseException
}

class OrdersMapper {
    + static List<Orders> getAllOrders(ConnectionPool) throws DatabaseException
    + static void createNewOrder(Timestamp, List<Orderline>, BigDecimal, ConnectionPool) throws DatabaseException
}
}

package controllers{
class OrderController {
    + static void getAllOrders(Context, ConnectionPool)
    + static void addRoutes(Javalin, ConnectionPool)
}

class CarportController {
    + static void getCarportById(Context, ConnectionPool)
    + static void createCarport(Context, ConnectionPool)
    + static void addRoutes(Javalin, ConnectionPool)
}

class ShedController {
    + static void getShedById(Context, ConnectionPool)
    + static void createShed(Context, ConnectionPool)
    + static void addRoutes(Javalin, ConnectionPool)
}
}

class Main {
    - static final String USER
    - static final String PASSWORD
    - static final String URL
    - static final String DB
    - static final ConnectionPool connectionPool
    + static void main(String[])
}

package Exceptions{
class DatabaseException {
    + DatabaseException(String)
    + DatabaseException(String, String)
}
}

Orders "1" *-- "*" Orderline : contains
Orderline "*" *-- "1" Carport : links to
Orderline "*" *-- "1" Shed : links to
Carport "1" *-- "1" Shed : may include
ConnectionPool -- CarportMapper : provides connections
ConnectionPool -- ShedMapper : provides connections
ConnectionPool -- OrderlineMapper : provides connections
ConnectionPool -- OrdersMapper : provides connections
CarportMapper -- Carport : maps
ShedMapper -- Shed : maps
OrderlineMapper -- Orderline : maps
OrdersMapper -- Orders : maps
OrderController -- OrdersMapper : interacts with
CarportController -- CarportMapper : interacts with
ShedController -- ShedMapper : interacts with

@enduml
